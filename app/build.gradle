apply plugin: 'com.android.application'
println("hello gradle")
//正确的语法： ${rootProject.ext.username}
println "${rootProject.ext.username}"
rootProject.ext.username = 163 // 弱类型语言Groovy
println "${rootProject.ext.username}"
println "${rootProject.ext.isRelease}"

// 赋值与引用
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies
def url = rootProject.ext.url
android {
    compileSdkVersion androidId.compileSdkVersion
    defaultConfig {
        applicationId appId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // 开启分包
        multiDexEnabled true
        // 设置分包配置
        // multiDexKeepFile file('multidex-config.txt')

        // 将svg图片生成 指定维度的png图片
        // vectorDrawables.generatedDensities('xhdpi','xxhdpi')
        // 使用support-v7兼容（5.0版本以上）
        vectorDrawables.useSupportLibrary = true
        // 只保留指定和默认资源
        resConfigs('zh-rCN')

        // 配置so库CPU架构（真机：arm，模拟器：x86）
        // x86  x86_64  mips  mips64
        ndk {
            //abiFilters('armeabi', 'armeabi-v7a')
            // 为了模拟器启动
            abiFilters('x86', 'x86_64')
        }
        // 源集 - 设置源集的属性，更改源集的 Java 目录或者自由目录等
        sourceSets {
            main {
                if (!isRelease) {
                    // 如果是组件化模式，需要单独运行时
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java.srcDirs = ['src/main/java']
                    res.srcDirs = ['src/main/res']
                    resources.srcDirs = ['src/main/resources']
                    aidl.srcDirs = ['src/main/aidl']
                    assets.srcDirs = ['src/main/assets']
                } else {
                    // 集成化模式，整个项目打包
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // 标准写法
    // implementation group: 'com.android.support', name:'appcompat-v7',
    // 简写
    // implementation 'com.android.support:appcompat-v7:28.0.0'
    // 依赖library库
    implementation project(":library")
   // implementation support.appcompat
   // implementation support.recyclerview
   // implementation support.constraint
// 依赖第三方库最简洁的方式：
    support.each { k, v -> implementation v }
}
